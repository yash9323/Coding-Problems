"""
Project Euler Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.

"""
import time

#Approach 1 :
def fib(n):
    f=[0,1]
    start_time=time.time()
    while f[-1]< n :
        f.append(f[-1]+f[-2])
    f=[i for i in f if i%2 == 0]
    print(sum(f))
    print("--- Approach 1  %s seconds ---" % (time.time() - start_time))
        
fib(4000000)

#Approach 2 : 
"""
The even fibo nos are 
2,8,34,144....
34=8*4+2
144=34*4+8
So on 
"""
def even_fibo(n):
    even=[2,8]
    start_time=time.time()
    while even[-1]<n:
        even.append(even[-1]*4+even[-2])
    even.pop()
    print(sum(even))
    print("--- Approach 2  %s seconds ---" % (time.time() - start_time))

even_fibo(4000000)
